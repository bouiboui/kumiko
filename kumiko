#!/usr/bin/env python


import argparse
import hashlib
import json
import os
import shutil
import sys

from pdf2image import convert_from_path
from pathlib import Path

from kumikolib import Kumiko

info = []

parser = argparse.ArgumentParser(description="Kumiko CLI")

# Input/Output
parser.add_argument(
    "-i", "--input", nargs="+", required=True, help="A file or folder name to parse"
)
parser.add_argument(
    "-o", "--output", nargs=1, help="A file name to save json/html output to"
)
parser.add_argument(
    "--rtl", action="store_true", help="Pass this option to number panels right-to-left"
)
parser.add_argument(
    "-s",
    "--save-panels",
    action="store_true",
    help="Enable this option to save detected panels as images",
)
parser.add_argument(
    "--pdf",
    action="store_true",
    help="Indicates the input is a PDF file to be converted to images",
)

# Configuration tweaks
parser.add_argument(
    "--min-panel-size-ratio",
    nargs=1,
    type=float,
    help="Panels will be considered too small and exluded if they have a width < img.width * ratio or height < img/height * ratio (default is 1/15th)",
)

# Utilities
parser.add_argument(
    "--debug",
    action="store_true",
    help="Generate an HTML debug file to show Kumiko's processing steps",
)
parser.add_argument(
    "--progress", action="store_true", help="Prints progress information"
)


args = parser.parse_args()
k = Kumiko(
    {
        "debug": args.debug,
        "progress": args.progress,
        "rtl": args.rtl,
        "min_panel_size_ratio": args.min_panel_size_ratio[0]
        if args.min_panel_size_ratio
        else False,
    }
)

file_or_folder = Path(args.input[0])
folder = None
html_file = None


# PDF File
if args.pdf:
    if not file_or_folder.is_file():
        print("The specified file is not a valid PDF.")
        sys.exit(1)

    parentFolderName = file_or_folder.parent.name
    pdfBaseName = file_or_folder.stem
    outputBasePath = Path("./output") / parentFolderName / pdfBaseName

    # Convert PDF to images
    images = convert_from_path(str(file_or_folder))
    for i, image in enumerate(images):
        image_output_path = outputBasePath / f"page_{i}.jpg"
        outputBasePath.mkdir(parents=True, exist_ok=True)
        image.save(str(image_output_path), "JPEG")

        if args.save_panels:
            # Process each image
            info = k.parse_images([str(image_output_path)])
            for item in info:
                panel_output_path = outputBasePath / f"page_{i}"
                k.save_panels(str(image_output_path), item["panels"], str(panel_output_path))

# Folder
elif len(args.input) == 1 and Path(args.input[0]).is_dir():
    folder = Path(args.input[0])
    info = k.parse_dir(str(folder))
    originalFolderName = folder.name
    html_file = str(Path("tests/results") / f"{originalFolderName}.html")

    if args.save_panels:
        for f in folder.iterdir():
            if f.is_file():
                panels_info = k.parse_images([str(f)])
                for item in panels_info:
                    output_path = Path("./output") / originalFolderName / f.stem
                    k.save_panels(str(f), item["panels"], str(output_path))

# File
elif len(args.input) == 1 and Path(args.input[0]).is_file():
    f = Path(args.input[0])
    info = k.parse_images([str(f)])
    html_file = str(Path("tests/results") / f"{f.name}.html")

    if args.save_panels:
        k.save_panels(str(f), info[0]["panels"])

# URL list
else:
    folder = "urls"
    downloaded_files, info = k.parse_url_list(args.input)
    filehash = hashlib.sha1(";".join(sorted(args.input)).encode()).hexdigest()
    html_file = str(Path("tests/results") / f"{filehash}.html")

    if args.save_panels:
        for file_path in downloaded_files:
            panels_info = k.parse_images([str(Path(file_path))])
            for item in panels_info:
                k.save_panels(str(Path(file_path)), item["panels"])

    # Delete the temporary directory after processing
    shutil.rmtree(os.path.dirname(downloaded_files[0]))


if len(info) == 0:
    print(
        "--input (-i) is not a file, or directory, or URL list: '"
        + str(args.input)
        + "'"
    )
    sys.exit(1)

info = json.dumps(info)

# Or JSON info
if args.output:
    f = open(args.output[0], "w")
    f.write(info)
    f.close()
else:
    print(info)
